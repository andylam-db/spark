-- Automatically generated by SQLQueryTestSuite
-- !query
SELECT
  emp_name,
  EXISTS (SELECT 1
          FROM   subquery_dept AS dept
          WHERE  dept.dept_id > 10
            AND dept.dept_id < 30)
FROM   subquery_emp AS emp
-- !query analysis
Project [emp_name#x, exists#x [] AS exists()#x]
:  +- Project [1 AS 1#x]
:     +- Filter ((dept_id#x > 10) AND (dept_id#x < 30))
:        +- SubqueryAlias dept
:           +- SubqueryAlias spark_catalog.default.subquery_dept
:              +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
+- SubqueryAlias emp
   +- SubqueryAlias spark_catalog.default.subquery_emp
      +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT
  emp_name,
  EXISTS (SELECT 1
          FROM   subquery_dept AS dept
          WHERE  emp.dept_id = dept.dept_id)
FROM   subquery_emp AS emp
-- !query analysis
Project [emp_name#x, exists#x [dept_id#x] AS exists(dept_id)#x]
:  +- Project [1 AS 1#x]
:     +- Filter (outer(dept_id#x) = dept_id#x)
:        +- SubqueryAlias dept
:           +- SubqueryAlias spark_catalog.default.subquery_dept
:              +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
+- SubqueryAlias emp
   +- SubqueryAlias spark_catalog.default.subquery_emp
      +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT
  sum(salary),
  sum(salary) FILTER (WHERE EXISTS (SELECT 1
                                    FROM   subquery_dept AS dept
                                    WHERE  dept.dept_id > 10
                                      AND dept.dept_id < 30))
FROM   subquery_emp AS emp
-- !query analysis
Aggregate [sum(salary#x) AS sum(salary)#x, sum(salary#x) FILTER (WHERE exists#x []) AS sum(salary) FILTER (WHERE exists())#x]
:  +- Project [1 AS 1#x]
:     +- Filter ((dept_id#x > 10) AND (dept_id#x < 30))
:        +- SubqueryAlias dept
:           +- SubqueryAlias spark_catalog.default.subquery_dept
:              +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
+- SubqueryAlias emp
   +- SubqueryAlias spark_catalog.default.subquery_emp
      +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT
  sum(salary),
  sum(salary) FILTER (WHERE EXISTS (SELECT 1
                                    FROM   subquery_dept AS dept
                                    WHERE  emp.dept_id = dept.dept_id))
FROM   subquery_emp AS emp
-- !query analysis
Aggregate [sum(salary#x) AS sum(salary)#x, sum(salary#x) FILTER (WHERE exists#x [dept_id#x]) AS sum(salary) FILTER (WHERE exists(dept_id))#x]
:  +- Project [1 AS 1#x]
:     +- Filter (outer(dept_id#x) = dept_id#x)
:        +- SubqueryAlias dept
:           +- SubqueryAlias spark_catalog.default.subquery_dept
:              +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
+- SubqueryAlias emp
   +- SubqueryAlias spark_catalog.default.subquery_emp
      +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT
    sum(salary),
    sum(salary) FILTER (WHERE EXISTS (SELECT 1
                                    FROM   subquery_dept AS dept
                                    WHERE  emp.dept_id = dept.dept_id)
                        OR EXISTS (SELECT 1
                                    FROM   bonus
                                    WHERE  emp.emp_name = bonus.emp_name))
FROM   subquery_emp AS emp
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "TABLE_OR_VIEW_NOT_FOUND",
  "sqlState" : "42P01",
  "messageParameters" : {
    "relationName" : "`bonus`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 295,
    "stopIndex" : 299,
    "fragment" : "bonus"
  } ]
}


-- !query
SELECT
    sum(DISTINCT salary),
    count(DISTINCT hiredate) FILTER (WHERE EXISTS (SELECT 1
                                    FROM   subquery_dept AS dept
                                    WHERE  emp.dept_id = dept.dept_id))
FROM   subquery_emp AS emp
-- !query analysis
Aggregate [sum(distinct salary#x) AS sum(DISTINCT salary)#x, count(distinct hiredate#x) FILTER (WHERE exists#x [dept_id#x]) AS count(DISTINCT hiredate) FILTER (WHERE exists(dept_id))#xL]
:  +- Project [1 AS 1#x]
:     +- Filter (outer(dept_id#x) = dept_id#x)
:        +- SubqueryAlias dept
:           +- SubqueryAlias spark_catalog.default.subquery_dept
:              +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
+- SubqueryAlias emp
   +- SubqueryAlias spark_catalog.default.subquery_emp
      +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT
    count(hiredate),
    sum(salary)
FROM   subquery_emp AS emp
GROUP BY EXISTS (SELECT 1
                FROM   subquery_dept AS dept
                WHERE  emp.dept_id = dept.dept_id)
-- !query analysis
Aggregate [exists#x [dept_id#x]], [count(hiredate#x) AS count(hiredate)#xL, sum(salary#x) AS sum(salary)#x]
:  +- Project [1 AS 1#x]
:     +- Filter (outer(dept_id#x) = dept_id#x)
:        +- SubqueryAlias dept
:           +- SubqueryAlias spark_catalog.default.subquery_dept
:              +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
+- SubqueryAlias emp
   +- SubqueryAlias spark_catalog.default.subquery_emp
      +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT
    count(DISTINCT hiredate),
    sum(DISTINCT salary)
FROM   subquery_emp AS emp
GROUP BY EXISTS (SELECT 1
                 FROM   subquery_dept AS dept
                 WHERE  emp.dept_id = dept.dept_id)
-- !query analysis
Aggregate [exists#x [dept_id#x]], [count(distinct hiredate#x) AS count(DISTINCT hiredate)#xL, sum(distinct salary#x) AS sum(DISTINCT salary)#x]
:  +- Project [1 AS 1#x]
:     +- Filter (outer(dept_id#x) = dept_id#x)
:        +- SubqueryAlias dept
:           +- SubqueryAlias spark_catalog.default.subquery_dept
:              +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
+- SubqueryAlias emp
   +- SubqueryAlias spark_catalog.default.subquery_emp
      +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT
    count(CASE WHEN EXISTS (SELECT 1
                            FROM   subquery_dept AS dept
                            WHERE  dept.dept_id > 10
                              AND dept.dept_id < 30) THEN 1 END),
    sum(CASE WHEN EXISTS (SELECT 1
                          FROM   subquery_dept AS dept
                          WHERE  dept.dept_id > 10
                            AND dept.dept_id < 30) THEN salary END)
FROM   subquery_emp AS emp
-- !query analysis
Aggregate [count(CASE WHEN exists#x [] THEN 1 END) AS count(CASE WHEN exists() THEN 1 END)#xL, sum(CASE WHEN exists#x [] THEN salary#x END) AS sum(CASE WHEN exists() THEN salary END)#x]
:  :- Project [1 AS 1#x]
:  :  +- Filter ((dept_id#x > 10) AND (dept_id#x < 30))
:  :     +- SubqueryAlias dept
:  :        +- SubqueryAlias spark_catalog.default.subquery_dept
:  :           +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
:  +- Project [1 AS 1#x]
:     +- Filter ((dept_id#x > 10) AND (dept_id#x < 30))
:        +- SubqueryAlias dept
:           +- SubqueryAlias spark_catalog.default.subquery_dept
:              +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
+- SubqueryAlias emp
   +- SubqueryAlias spark_catalog.default.subquery_emp
      +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT
    count(CASE WHEN EXISTS (SELECT 1
                            FROM   subquery_dept AS dept
                            WHERE  emp.dept_id = dept.dept_id) THEN 1 END),
    sum(CASE WHEN EXISTS (SELECT 1
                          FROM   subquery_dept AS dept
                          WHERE  emp.dept_id = dept.dept_id) THEN salary END)
FROM   subquery_emp AS emp
-- !query analysis
Aggregate [count(CASE WHEN exists#x [dept_id#x] THEN 1 END) AS count(CASE WHEN exists(dept_id) THEN 1 END)#xL, sum(CASE WHEN exists#x [dept_id#x] THEN salary#x END) AS sum(CASE WHEN exists(dept_id) THEN salary END)#x]
:  :- Project [1 AS 1#x]
:  :  +- Filter (outer(dept_id#x) = dept_id#x)
:  :     +- SubqueryAlias dept
:  :        +- SubqueryAlias spark_catalog.default.subquery_dept
:  :           +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
:  +- Project [1 AS 1#x]
:     +- Filter (outer(dept_id#x) = dept_id#x)
:        +- SubqueryAlias dept
:           +- SubqueryAlias spark_catalog.default.subquery_dept
:              +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
+- SubqueryAlias emp
   +- SubqueryAlias spark_catalog.default.subquery_emp
      +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT
    emp_name,
    sum(salary) OVER (PARTITION BY EXISTS (SELECT 1
                                           FROM   subquery_dept AS dept
                                           WHERE  dept.dept_id > 10
                                             AND dept.dept_id < 30))
FROM   subquery_emp AS emp
-- !query analysis
Project [emp_name#x, sum(salary) OVER (PARTITION BY exists() ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x]
+- Project [emp_name#x, salary#x, _w1#x, sum(salary) OVER (PARTITION BY exists() ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x, sum(salary) OVER (PARTITION BY exists() ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x]
   +- Window [sum(salary#x) windowspecdefinition(_w1#x, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS sum(salary) OVER (PARTITION BY exists() ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x], [_w1#x]
      +- Project [emp_name#x, salary#x, exists#x [] AS _w1#x]
         :  +- Project [1 AS 1#x]
         :     +- Filter ((dept_id#x > 10) AND (dept_id#x < 30))
         :        +- SubqueryAlias dept
         :           +- SubqueryAlias spark_catalog.default.subquery_dept
         :              +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
         +- SubqueryAlias emp
            +- SubqueryAlias spark_catalog.default.subquery_emp
               +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT
    emp_name,
    sum(salary) OVER (PARTITION BY EXISTS (SELECT 1
                                           FROM   subquery_dept AS dept
                                           WHERE  emp.dept_id = dept.dept_id))
FROM   subquery_emp AS emp
-- !query analysis
Project [emp_name#x, sum(salary) OVER (PARTITION BY exists(dept_id) ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x]
+- Project [emp_name#x, salary#x, _w1#x, sum(salary) OVER (PARTITION BY exists(dept_id) ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x, sum(salary) OVER (PARTITION BY exists(dept_id) ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x]
   +- Window [sum(salary#x) windowspecdefinition(_w1#x, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS sum(salary) OVER (PARTITION BY exists(dept_id) ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x], [_w1#x]
      +- Project [emp_name#x, salary#x, exists#x [dept_id#x] AS _w1#x]
         :  +- Project [1 AS 1#x]
         :     +- Filter (outer(dept_id#x) = dept_id#x)
         :        +- SubqueryAlias dept
         :           +- SubqueryAlias spark_catalog.default.subquery_dept
         :              +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
         +- SubqueryAlias emp
            +- SubqueryAlias spark_catalog.default.subquery_emp
               +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet
