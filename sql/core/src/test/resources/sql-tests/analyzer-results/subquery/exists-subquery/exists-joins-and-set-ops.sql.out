-- Automatically generated by SQLQueryTestSuite
-- !query
SELECT * 
FROM   subquery_emp AS emp, 
       subquery_dept AS dept 
WHERE  emp.dept_id = dept.dept_id 
       AND EXISTS (SELECT * 
                   FROM   subquery_bonus AS bonus 
                   WHERE  bonus.emp_name = emp.emp_name)
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x, dept_id#x, dept_name#x, state#x]
+- Filter ((dept_id#x = dept_id#x) AND exists#x [emp_name#x])
   :  +- Project [emp_name#x, bonus_amt#x]
   :     +- Filter (emp_name#x = outer(emp_name#x))
   :        +- SubqueryAlias bonus
   :           +- SubqueryAlias spark_catalog.default.subquery_bonus
   :              +- Relation spark_catalog.default.subquery_bonus[emp_name#x,bonus_amt#x] parquet
   +- Join Inner
      :- SubqueryAlias emp
      :  +- SubqueryAlias spark_catalog.default.subquery_emp
      :     +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet
      +- SubqueryAlias dept
         +- SubqueryAlias spark_catalog.default.subquery_dept
            +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet


-- !query
SELECT * 
FROM   subquery_emp AS emp 
       JOIN subquery_dept AS dept 
         ON emp.dept_id = dept.dept_id 
WHERE  EXISTS (SELECT * 
               FROM   subquery_bonus AS bonus 
               WHERE  bonus.emp_name = emp.emp_name)
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x, dept_id#x, dept_name#x, state#x]
+- Filter exists#x [emp_name#x]
   :  +- Project [emp_name#x, bonus_amt#x]
   :     +- Filter (emp_name#x = outer(emp_name#x))
   :        +- SubqueryAlias bonus
   :           +- SubqueryAlias spark_catalog.default.subquery_bonus
   :              +- Relation spark_catalog.default.subquery_bonus[emp_name#x,bonus_amt#x] parquet
   +- Join Inner, (dept_id#x = dept_id#x)
      :- SubqueryAlias emp
      :  +- SubqueryAlias spark_catalog.default.subquery_emp
      :     +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet
      +- SubqueryAlias dept
         +- SubqueryAlias spark_catalog.default.subquery_dept
            +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet


-- !query
SELECT * 
FROM   subquery_emp AS emp 
       LEFT JOIN subquery_dept AS dept 
              ON emp.dept_id = dept.dept_id 
WHERE  EXISTS (SELECT * 
               FROM   subquery_bonus AS bonus 
               WHERE  bonus.emp_name = emp.emp_name)
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x, dept_id#x, dept_name#x, state#x]
+- Filter exists#x [emp_name#x]
   :  +- Project [emp_name#x, bonus_amt#x]
   :     +- Filter (emp_name#x = outer(emp_name#x))
   :        +- SubqueryAlias bonus
   :           +- SubqueryAlias spark_catalog.default.subquery_bonus
   :              +- Relation spark_catalog.default.subquery_bonus[emp_name#x,bonus_amt#x] parquet
   +- Join LeftOuter, (dept_id#x = dept_id#x)
      :- SubqueryAlias emp
      :  +- SubqueryAlias spark_catalog.default.subquery_emp
      :     +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet
      +- SubqueryAlias dept
         +- SubqueryAlias spark_catalog.default.subquery_dept
            +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet


-- !query
SELECT * 
FROM   subquery_emp AS emp, 
       subquery_dept AS dept 
WHERE  emp.dept_id = dept.dept_id 
       AND NOT EXISTS (SELECT * 
                       FROM   subquery_bonus AS bonus 
                       WHERE  bonus.emp_name = emp.emp_name)
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x, dept_id#x, dept_name#x, state#x]
+- Filter ((dept_id#x = dept_id#x) AND NOT exists#x [emp_name#x])
   :  +- Project [emp_name#x, bonus_amt#x]
   :     +- Filter (emp_name#x = outer(emp_name#x))
   :        +- SubqueryAlias bonus
   :           +- SubqueryAlias spark_catalog.default.subquery_bonus
   :              +- Relation spark_catalog.default.subquery_bonus[emp_name#x,bonus_amt#x] parquet
   +- Join Inner
      :- SubqueryAlias emp
      :  +- SubqueryAlias spark_catalog.default.subquery_emp
      :     +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet
      +- SubqueryAlias dept
         +- SubqueryAlias spark_catalog.default.subquery_dept
            +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet


-- !query
SELECT * 
FROM   subquery_bonus AS bonus 
WHERE  EXISTS (SELECT * 
                 FROM   subquery_emp AS emp 
                        JOIN subquery_dept AS dept 
                          ON dept.dept_id = emp.dept_id 
                 WHERE  bonus.emp_name = emp.emp_name)
-- !query analysis
Project [emp_name#x, bonus_amt#x]
+- Filter exists#x [emp_name#x]
   :  +- Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x, dept_id#x, dept_name#x, state#x]
   :     +- Filter (outer(emp_name#x) = emp_name#x)
   :        +- Join Inner, (dept_id#x = dept_id#x)
   :           :- SubqueryAlias emp
   :           :  +- SubqueryAlias spark_catalog.default.subquery_emp
   :           :     +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet
   :           +- SubqueryAlias dept
   :              +- SubqueryAlias spark_catalog.default.subquery_dept
   :                 +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias bonus
      +- SubqueryAlias spark_catalog.default.subquery_bonus
         +- Relation spark_catalog.default.subquery_bonus[emp_name#x,bonus_amt#x] parquet


-- !query
SELECT * 
FROM   subquery_bonus AS bonus 
WHERE  EXISTS (SELECT * 
                 FROM   subquery_emp AS emp 
                        RIGHT JOIN subquery_dept AS dept 
                                ON dept.dept_id = emp.dept_id 
                 WHERE  bonus.emp_name = emp.emp_name)
-- !query analysis
Project [emp_name#x, bonus_amt#x]
+- Filter exists#x [emp_name#x]
   :  +- Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x, dept_id#x, dept_name#x, state#x]
   :     +- Filter (outer(emp_name#x) = emp_name#x)
   :        +- Join RightOuter, (dept_id#x = dept_id#x)
   :           :- SubqueryAlias emp
   :           :  +- SubqueryAlias spark_catalog.default.subquery_emp
   :           :     +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet
   :           +- SubqueryAlias dept
   :              +- SubqueryAlias spark_catalog.default.subquery_dept
   :                 +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias bonus
      +- SubqueryAlias spark_catalog.default.subquery_bonus
         +- Relation spark_catalog.default.subquery_bonus[emp_name#x,bonus_amt#x] parquet


-- !query
SELECT * 
FROM   subquery_bonus AS bonus 
WHERE  EXISTS (SELECT dept.dept_id, 
                        emp.emp_name, 
                        Max(salary), 
                        Count(*) 
                 FROM   subquery_emp AS emp 
                        JOIN subquery_dept AS dept 
                          ON dept.dept_id = emp.dept_id 
                 WHERE  bonus.emp_name = emp.emp_name 
                 GROUP  BY dept.dept_id, 
                           emp.emp_name 
                 ORDER  BY emp.emp_name)
-- !query analysis
Project [emp_name#x, bonus_amt#x]
+- Filter exists#x [emp_name#x]
   :  +- Sort [emp_name#x ASC NULLS FIRST], true
   :     +- Aggregate [dept_id#x, emp_name#x], [dept_id#x, emp_name#x, max(salary#x) AS max(salary)#x, count(1) AS count(1)#xL]
   :        +- Filter (outer(emp_name#x) = emp_name#x)
   :           +- Join Inner, (dept_id#x = dept_id#x)
   :              :- SubqueryAlias emp
   :              :  +- SubqueryAlias spark_catalog.default.subquery_emp
   :              :     +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet
   :              +- SubqueryAlias dept
   :                 +- SubqueryAlias spark_catalog.default.subquery_dept
   :                    +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias bonus
      +- SubqueryAlias spark_catalog.default.subquery_bonus
         +- Relation spark_catalog.default.subquery_bonus[emp_name#x,bonus_amt#x] parquet


-- !query
SELECT emp_name, 
       Sum(bonus_amt) 
FROM   subquery_bonus AS bonus 
WHERE  EXISTS (SELECT emp_name, 
                        Max(salary) 
                 FROM   subquery_emp AS emp 
                        JOIN subquery_dept AS dept 
                          ON dept.dept_id = emp.dept_id 
                 WHERE  bonus.emp_name = emp.emp_name 
                 GROUP  BY emp_name 
                 HAVING Count(*) > 1 
                 ORDER  BY emp_name)
GROUP  BY emp_name
-- !query analysis
Aggregate [emp_name#x], [emp_name#x, sum(bonus_amt#x) AS sum(bonus_amt)#x]
+- Filter exists#x [emp_name#x]
   :  +- Sort [emp_name#x ASC NULLS FIRST], true
   :     +- Project [emp_name#x, max(salary)#x]
   :        +- Filter (count(1)#xL > cast(1 as bigint))
   :           +- Aggregate [emp_name#x], [emp_name#x, max(salary#x) AS max(salary)#x, count(1) AS count(1)#xL]
   :              +- Filter (outer(emp_name#x) = emp_name#x)
   :                 +- Join Inner, (dept_id#x = dept_id#x)
   :                    :- SubqueryAlias emp
   :                    :  +- SubqueryAlias spark_catalog.default.subquery_emp
   :                    :     +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet
   :                    +- SubqueryAlias dept
   :                       +- SubqueryAlias spark_catalog.default.subquery_dept
   :                          +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias bonus
      +- SubqueryAlias spark_catalog.default.subquery_bonus
         +- Relation spark_catalog.default.subquery_bonus[emp_name#x,bonus_amt#x] parquet


-- !query
SELECT emp_name, 
       Sum(bonus_amt) 
FROM   subquery_bonus AS bonus 
WHERE  NOT EXISTS (SELECT emp_name, 
                          Max(salary) 
                   FROM   subquery_emp AS emp 
                          JOIN subquery_dept AS dept 
                            ON dept.dept_id = emp.dept_id 
                   WHERE  bonus.emp_name = emp.emp_name 
                   GROUP  BY emp_name 
                   HAVING Count(*) > 1 
                   ORDER  BY emp_name) 
GROUP  BY emp_name
-- !query analysis
Aggregate [emp_name#x], [emp_name#x, sum(bonus_amt#x) AS sum(bonus_amt)#x]
+- Filter NOT exists#x [emp_name#x]
   :  +- Sort [emp_name#x ASC NULLS FIRST], true
   :     +- Project [emp_name#x, max(salary)#x]
   :        +- Filter (count(1)#xL > cast(1 as bigint))
   :           +- Aggregate [emp_name#x], [emp_name#x, max(salary#x) AS max(salary)#x, count(1) AS count(1)#xL]
   :              +- Filter (outer(emp_name#x) = emp_name#x)
   :                 +- Join Inner, (dept_id#x = dept_id#x)
   :                    :- SubqueryAlias emp
   :                    :  +- SubqueryAlias spark_catalog.default.subquery_emp
   :                    :     +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet
   :                    +- SubqueryAlias dept
   :                       +- SubqueryAlias spark_catalog.default.subquery_dept
   :                          +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias bonus
      +- SubqueryAlias spark_catalog.default.subquery_bonus
         +- Relation spark_catalog.default.subquery_bonus[emp_name#x,bonus_amt#x] parquet


-- !query
SELECT * 
FROM   subquery_emp AS emp 
WHERE  EXISTS (SELECT * 
               FROM   subquery_dept AS dept 
               WHERE  dept_id < 30 
               UNION 
               SELECT * 
               FROM   subquery_dept AS dept 
               WHERE  dept_id >= 30 
                      AND dept_id <= 50)
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
+- Filter exists#x []
   :  +- Distinct
   :     +- Union false, false
   :        :- Project [dept_id#x, dept_name#x, state#x]
   :        :  +- Filter (dept_id#x < 30)
   :        :     +- SubqueryAlias dept
   :        :        +- SubqueryAlias spark_catalog.default.subquery_dept
   :        :           +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   :        +- Project [dept_id#x, dept_name#x, state#x]
   :           +- Filter ((dept_id#x >= 30) AND (dept_id#x <= 50))
   :              +- SubqueryAlias dept
   :                 +- SubqueryAlias spark_catalog.default.subquery_dept
   :                    +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT * 
FROM   subquery_emp AS emp 
WHERE  EXISTS (SELECT * 
                 FROM   subquery_dept AS dept 
                 WHERE  dept_id < 30 
                 INTERSECT 
                 SELECT * 
                 FROM   subquery_dept AS dept 
                 WHERE  dept_id >= 30 
                        AND dept_id <= 50)
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
+- Filter exists#x []
   :  +- Intersect false
   :     :- Project [dept_id#x, dept_name#x, state#x]
   :     :  +- Filter (dept_id#x < 30)
   :     :     +- SubqueryAlias dept
   :     :        +- SubqueryAlias spark_catalog.default.subquery_dept
   :     :           +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   :     +- Project [dept_id#x, dept_name#x, state#x]
   :        +- Filter ((dept_id#x >= 30) AND (dept_id#x <= 50))
   :           +- SubqueryAlias dept
   :              +- SubqueryAlias spark_catalog.default.subquery_dept
   :                 +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT * 
FROM   subquery_emp AS emp 
WHERE  NOT EXISTS (SELECT * 
                     FROM   subquery_dept AS dept 
                     WHERE  dept_id < 30 
                     INTERSECT 
                     SELECT * 
                     FROM   subquery_dept AS dept 
                     WHERE  dept_id >= 30 
                            AND dept_id <= 50)
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
+- Filter NOT exists#x []
   :  +- Intersect false
   :     :- Project [dept_id#x, dept_name#x, state#x]
   :     :  +- Filter (dept_id#x < 30)
   :     :     +- SubqueryAlias dept
   :     :        +- SubqueryAlias spark_catalog.default.subquery_dept
   :     :           +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   :     +- Project [dept_id#x, dept_name#x, state#x]
   :        +- Filter ((dept_id#x >= 30) AND (dept_id#x <= 50))
   :           +- SubqueryAlias dept
   :              +- SubqueryAlias spark_catalog.default.subquery_dept
   :                 +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT * 
FROM   subquery_emp AS emp 
WHERE  EXISTS (SELECT * 
                 FROM   subquery_dept AS dept 
                 EXCEPT 
                 SELECT * 
                 FROM   subquery_dept AS dept 
                 WHERE  dept_id > 50)
UNION ALL 
SELECT * 
FROM   subquery_emp AS emp 
WHERE  EXISTS (SELECT * 
                 FROM   subquery_dept AS dept 
                 WHERE  dept_id < 30 
                 INTERSECT 
                 SELECT * 
                 FROM   subquery_dept AS dept 
                 WHERE  dept_id >= 30 
                        AND dept_id <= 50)
-- !query analysis
Union false, false
:- Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
:  +- Filter exists#x []
:     :  +- Except false
:     :     :- Project [dept_id#x, dept_name#x, state#x]
:     :     :  +- SubqueryAlias dept
:     :     :     +- SubqueryAlias spark_catalog.default.subquery_dept
:     :     :        +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
:     :     +- Project [dept_id#x, dept_name#x, state#x]
:     :        +- Filter (dept_id#x > 50)
:     :           +- SubqueryAlias dept
:     :              +- SubqueryAlias spark_catalog.default.subquery_dept
:     :                 +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
:     +- SubqueryAlias emp
:        +- SubqueryAlias spark_catalog.default.subquery_emp
:           +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet
+- Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
   +- Filter exists#x []
      :  +- Intersect false
      :     :- Project [dept_id#x, dept_name#x, state#x]
      :     :  +- Filter (dept_id#x < 30)
      :     :     +- SubqueryAlias dept
      :     :        +- SubqueryAlias spark_catalog.default.subquery_dept
      :     :           +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
      :     +- Project [dept_id#x, dept_name#x, state#x]
      :        +- Filter ((dept_id#x >= 30) AND (dept_id#x <= 50))
      :           +- SubqueryAlias dept
      :              +- SubqueryAlias spark_catalog.default.subquery_dept
      :                 +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
      +- SubqueryAlias emp
         +- SubqueryAlias spark_catalog.default.subquery_emp
            +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT * 
FROM   subquery_emp AS emp 
WHERE  EXISTS (SELECT * 
                 FROM   subquery_dept AS dept 
                 EXCEPT 
                 SELECT * 
                 FROM   subquery_dept AS dept 
                 WHERE  dept_id > 50)
UNION
SELECT * 
FROM   subquery_emp AS emp 
WHERE  EXISTS (SELECT * 
                 FROM   subquery_dept AS dept 
                 WHERE  dept_id < 30 
                 INTERSECT 
                 SELECT * 
                 FROM   subquery_dept AS dept 
                 WHERE  dept_id >= 30 
                        AND dept_id <= 50)
-- !query analysis
Distinct
+- Union false, false
   :- Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
   :  +- Filter exists#x []
   :     :  +- Except false
   :     :     :- Project [dept_id#x, dept_name#x, state#x]
   :     :     :  +- SubqueryAlias dept
   :     :     :     +- SubqueryAlias spark_catalog.default.subquery_dept
   :     :     :        +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   :     :     +- Project [dept_id#x, dept_name#x, state#x]
   :     :        +- Filter (dept_id#x > 50)
   :     :           +- SubqueryAlias dept
   :     :              +- SubqueryAlias spark_catalog.default.subquery_dept
   :     :                 +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   :     +- SubqueryAlias emp
   :        +- SubqueryAlias spark_catalog.default.subquery_emp
   :           +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet
   +- Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
      +- Filter exists#x []
         :  +- Intersect false
         :     :- Project [dept_id#x, dept_name#x, state#x]
         :     :  +- Filter (dept_id#x < 30)
         :     :     +- SubqueryAlias dept
         :     :        +- SubqueryAlias spark_catalog.default.subquery_dept
         :     :           +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
         :     +- Project [dept_id#x, dept_name#x, state#x]
         :        +- Filter ((dept_id#x >= 30) AND (dept_id#x <= 50))
         :           +- SubqueryAlias dept
         :              +- SubqueryAlias spark_catalog.default.subquery_dept
         :                 +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
         +- SubqueryAlias emp
            +- SubqueryAlias spark_catalog.default.subquery_emp
               +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT *
FROM   subquery_emp AS emp
WHERE  EXISTS (SELECT *
               FROM   subquery_dept AS dept
               WHERE  dept_id = emp.dept_id and state = "CA"
               UNION
               SELECT *
               FROM   subquery_dept AS dept
               WHERE  dept_id = emp.dept_id and state = "TX")
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
+- Filter exists#x [dept_id#x && dept_id#x]
   :  +- Distinct
   :     +- Union false, false
   :        :- Project [dept_id#x, dept_name#x, state#x]
   :        :  +- Filter ((dept_id#x = outer(dept_id#x)) AND (state#x = CA))
   :        :     +- SubqueryAlias dept
   :        :        +- SubqueryAlias spark_catalog.default.subquery_dept
   :        :           +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   :        +- Project [dept_id#x, dept_name#x, state#x]
   :           +- Filter ((dept_id#x = outer(dept_id#x)) AND (state#x = TX))
   :              +- SubqueryAlias dept
   :                 +- SubqueryAlias spark_catalog.default.subquery_dept
   :                    +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT *
FROM   subquery_emp AS emp
WHERE NOT EXISTS (SELECT *
               FROM   subquery_dept AS dept
               WHERE  dept_id = emp.dept_id and state = "CA"
               UNION
               SELECT *
               FROM   subquery_dept AS dept
               WHERE  dept_id = emp.dept_id and state = "TX")
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
+- Filter NOT exists#x [dept_id#x && dept_id#x]
   :  +- Distinct
   :     +- Union false, false
   :        :- Project [dept_id#x, dept_name#x, state#x]
   :        :  +- Filter ((dept_id#x = outer(dept_id#x)) AND (state#x = CA))
   :        :     +- SubqueryAlias dept
   :        :        +- SubqueryAlias spark_catalog.default.subquery_dept
   :        :           +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   :        +- Project [dept_id#x, dept_name#x, state#x]
   :           +- Filter ((dept_id#x = outer(dept_id#x)) AND (state#x = TX))
   :              +- SubqueryAlias dept
   :                 +- SubqueryAlias spark_catalog.default.subquery_dept
   :                    +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT *
FROM   subquery_emp AS emp
WHERE  EXISTS (SELECT *
               FROM   subquery_dept AS dept
               WHERE  dept_id = emp.dept_id and state = "CA"
               INTERSECT ALL
               SELECT *
               FROM   subquery_dept AS dept
               WHERE  dept_id = emp.dept_id and state = "TX")
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
+- Filter exists#x [dept_id#x && dept_id#x]
   :  +- Intersect All true
   :     :- Project [dept_id#x, dept_name#x, state#x]
   :     :  +- Filter ((dept_id#x = outer(dept_id#x)) AND (state#x = CA))
   :     :     +- SubqueryAlias dept
   :     :        +- SubqueryAlias spark_catalog.default.subquery_dept
   :     :           +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   :     +- Project [dept_id#x, dept_name#x, state#x]
   :        +- Filter ((dept_id#x = outer(dept_id#x)) AND (state#x = TX))
   :           +- SubqueryAlias dept
   :              +- SubqueryAlias spark_catalog.default.subquery_dept
   :                 +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT *
FROM   subquery_emp AS emp
WHERE EXISTS (SELECT *
               FROM   subquery_dept AS dept
               WHERE  dept_id = emp.dept_id and state = "CA"
               INTERSECT DISTINCT
               SELECT *
               FROM   subquery_dept AS dept
               WHERE  dept_id = emp.dept_id and state = "TX")
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
+- Filter exists#x [dept_id#x && dept_id#x]
   :  +- Intersect false
   :     :- Project [dept_id#x, dept_name#x, state#x]
   :     :  +- Filter ((dept_id#x = outer(dept_id#x)) AND (state#x = CA))
   :     :     +- SubqueryAlias dept
   :     :        +- SubqueryAlias spark_catalog.default.subquery_dept
   :     :           +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   :     +- Project [dept_id#x, dept_name#x, state#x]
   :        +- Filter ((dept_id#x = outer(dept_id#x)) AND (state#x = TX))
   :           +- SubqueryAlias dept
   :              +- SubqueryAlias spark_catalog.default.subquery_dept
   :                 +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT *
FROM   subquery_emp AS emp
WHERE  EXISTS (SELECT *
               FROM   subquery_dept AS dept
               WHERE  dept_id = emp.dept_id and state = "CA"
               EXCEPT ALL
               SELECT *
               FROM   subquery_dept AS dept
               WHERE  dept_id = emp.dept_id and state = "TX")
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
+- Filter exists#x [dept_id#x && dept_id#x]
   :  +- Except All true
   :     :- Project [dept_id#x, dept_name#x, state#x]
   :     :  +- Filter ((dept_id#x = outer(dept_id#x)) AND (state#x = CA))
   :     :     +- SubqueryAlias dept
   :     :        +- SubqueryAlias spark_catalog.default.subquery_dept
   :     :           +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   :     +- Project [dept_id#x, dept_name#x, state#x]
   :        +- Filter ((dept_id#x = outer(dept_id#x)) AND (state#x = TX))
   :           +- SubqueryAlias dept
   :              +- SubqueryAlias spark_catalog.default.subquery_dept
   :                 +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT *
FROM   subquery_emp AS emp
WHERE  EXISTS (SELECT *
               FROM   subquery_dept AS dept
               WHERE  dept_id = emp.dept_id and state = "CA"
               EXCEPT DISTINCT
               SELECT *
               FROM   subquery_dept AS dept
               WHERE  dept_id = emp.dept_id and state = "TX")
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
+- Filter exists#x [dept_id#x && dept_id#x]
   :  +- Except false
   :     :- Project [dept_id#x, dept_name#x, state#x]
   :     :  +- Filter ((dept_id#x = outer(dept_id#x)) AND (state#x = CA))
   :     :     +- SubqueryAlias dept
   :     :        +- SubqueryAlias spark_catalog.default.subquery_dept
   :     :           +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   :     +- Project [dept_id#x, dept_name#x, state#x]
   :        +- Filter ((dept_id#x = outer(dept_id#x)) AND (state#x = TX))
   :           +- SubqueryAlias dept
   :              +- SubqueryAlias spark_catalog.default.subquery_dept
   :                 +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT *
FROM   subquery_emp AS emp
WHERE NOT EXISTS (SELECT *
               FROM   subquery_dept AS dept
               WHERE  dept_id = emp.dept_id and state = "CA"
               INTERSECT ALL
               SELECT *
               FROM   subquery_dept AS dept
               WHERE  dept_id = emp.dept_id and state = "TX")
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
+- Filter NOT exists#x [dept_id#x && dept_id#x]
   :  +- Intersect All true
   :     :- Project [dept_id#x, dept_name#x, state#x]
   :     :  +- Filter ((dept_id#x = outer(dept_id#x)) AND (state#x = CA))
   :     :     +- SubqueryAlias dept
   :     :        +- SubqueryAlias spark_catalog.default.subquery_dept
   :     :           +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   :     +- Project [dept_id#x, dept_name#x, state#x]
   :        +- Filter ((dept_id#x = outer(dept_id#x)) AND (state#x = TX))
   :           +- SubqueryAlias dept
   :              +- SubqueryAlias spark_catalog.default.subquery_dept
   :                 +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT *
FROM   subquery_emp AS emp
WHERE NOT EXISTS (SELECT *
               FROM   subquery_dept AS dept
               WHERE  dept_id = emp.dept_id and state = "CA"
               EXCEPT DISTINCT
               SELECT * 
               FROM   subquery_dept AS dept 
               WHERE  dept_id = emp.dept_id and state = "TX")
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
+- Filter NOT exists#x [dept_id#x && dept_id#x]
   :  +- Except false
   :     :- Project [dept_id#x, dept_name#x, state#x]
   :     :  +- Filter ((dept_id#x = outer(dept_id#x)) AND (state#x = CA))
   :     :     +- SubqueryAlias dept
   :     :        +- SubqueryAlias spark_catalog.default.subquery_dept
   :     :           +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   :     +- Project [dept_id#x, dept_name#x, state#x]
   :        +- Filter ((dept_id#x = outer(dept_id#x)) AND (state#x = TX))
   :           +- SubqueryAlias dept
   :              +- SubqueryAlias spark_catalog.default.subquery_dept
   :                 +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet
