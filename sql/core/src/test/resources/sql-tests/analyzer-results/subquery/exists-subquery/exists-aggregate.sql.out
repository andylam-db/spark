-- Automatically generated by SQLQueryTestSuite
-- !query
SELECT emp.dept_id, 
       avg(salary),
       sum(salary)
FROM   subquery_emp AS emp 
WHERE  EXISTS (SELECT state 
               FROM   subquery_dept AS dept 
               WHERE  dept.dept_id = emp.dept_id) 
GROUP  BY dept_id
-- !query analysis
Aggregate [dept_id#x], [dept_id#x, avg(salary#x) AS avg(salary)#x, sum(salary#x) AS sum(salary)#x]
+- Filter exists#x [dept_id#x]
   :  +- Project [state#x]
   :     +- Filter (dept_id#x = outer(dept_id#x))
   :        +- SubqueryAlias dept
   :           +- SubqueryAlias spark_catalog.default.subquery_dept
   :              +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT emp_name 
FROM   subquery_emp AS emp 
WHERE  EXISTS (SELECT max(dept.dept_id) a 
               FROM   subquery_dept AS dept 
               WHERE  dept.dept_id = emp.dept_id 
               GROUP  BY dept.dept_id)
-- !query analysis
Project [emp_name#x]
+- Filter exists#x [dept_id#x]
   :  +- Aggregate [dept_id#x], [max(dept_id#x) AS a#x]
   :     +- Filter (dept_id#x = outer(dept_id#x))
   :        +- SubqueryAlias dept
   :           +- SubqueryAlias spark_catalog.default.subquery_dept
   :              +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT count(*) 
FROM   subquery_emp AS emp 
WHERE  EXISTS (SELECT max(dept.dept_id) a 
               FROM   subquery_dept AS dept 
               WHERE  dept.dept_id = emp.dept_id 
               GROUP  BY dept.dept_id)
-- !query analysis
Aggregate [count(1) AS count(1)#xL]
+- Filter exists#x [dept_id#x]
   :  +- Aggregate [dept_id#x], [max(dept_id#x) AS a#x]
   :     +- Filter (dept_id#x = outer(dept_id#x))
   :        +- SubqueryAlias dept
   :           +- SubqueryAlias spark_catalog.default.subquery_dept
   :              +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT * 
FROM   subquery_bonus AS bonus 
WHERE  EXISTS (SELECT 1 
               FROM   subquery_emp AS emp 
               WHERE  emp.emp_name = bonus.emp_name 
                      AND EXISTS (SELECT max(dept.dept_id) 
                                  FROM   subquery_dept AS dept 
                                  WHERE  emp.dept_id = dept.dept_id 
                                  GROUP  BY dept.dept_id))
-- !query analysis
Project [emp_name#x, bonus_amt#x]
+- Filter exists#x [emp_name#x]
   :  +- Project [1 AS 1#x]
   :     +- Filter ((emp_name#x = outer(emp_name#x)) AND exists#x [dept_id#x])
   :        :  +- Aggregate [dept_id#x], [max(dept_id#x) AS max(dept_id)#x]
   :        :     +- Filter (outer(dept_id#x) = dept_id#x)
   :        :        +- SubqueryAlias dept
   :        :           +- SubqueryAlias spark_catalog.default.subquery_dept
   :        :              +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   :        +- SubqueryAlias emp
   :           +- SubqueryAlias spark_catalog.default.subquery_emp
   :              +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet
   +- SubqueryAlias bonus
      +- SubqueryAlias spark_catalog.default.subquery_bonus
         +- Relation spark_catalog.default.subquery_bonus[emp_name#x,bonus_amt#x] parquet


-- !query
SELECT emp.dept_id, 
       Avg(salary), 
       Sum(salary) 
FROM   subquery_emp AS emp 
WHERE  NOT EXISTS (SELECT state 
                   FROM   subquery_dept AS dept 
                   WHERE  dept.dept_id = emp.dept_id) 
GROUP  BY dept_id
-- !query analysis
Aggregate [dept_id#x], [dept_id#x, avg(salary#x) AS avg(salary)#x, sum(salary#x) AS sum(salary)#x]
+- Filter NOT exists#x [dept_id#x]
   :  +- Project [state#x]
   :     +- Filter (dept_id#x = outer(dept_id#x))
   :        +- SubqueryAlias dept
   :           +- SubqueryAlias spark_catalog.default.subquery_dept
   :              +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT emp_name 
FROM   subquery_emp AS emp 
WHERE  NOT EXISTS (SELECT max(dept.dept_id) a 
                   FROM   subquery_dept AS dept 
                   WHERE  dept.dept_id = emp.dept_id 
                   GROUP  BY dept.dept_id)
-- !query analysis
Project [emp_name#x]
+- Filter NOT exists#x [dept_id#x]
   :  +- Aggregate [dept_id#x], [max(dept_id#x) AS a#x]
   :     +- Filter (dept_id#x = outer(dept_id#x))
   :        +- SubqueryAlias dept
   :           +- SubqueryAlias spark_catalog.default.subquery_dept
   :              +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT count(*) 
FROM   subquery_emp AS emp 
WHERE  NOT EXISTS (SELECT max(dept.dept_id) a 
                   FROM   subquery_dept AS dept 
                   WHERE  dept.dept_id = emp.dept_id 
                   GROUP  BY dept.dept_id)
-- !query analysis
Aggregate [count(1) AS count(1)#xL]
+- Filter NOT exists#x [dept_id#x]
   :  +- Aggregate [dept_id#x], [max(dept_id#x) AS a#x]
   :     +- Filter (dept_id#x = outer(dept_id#x))
   :        +- SubqueryAlias dept
   :           +- SubqueryAlias spark_catalog.default.subquery_dept
   :              +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT * 
FROM   subquery_bonus AS bonus 
WHERE  NOT EXISTS (SELECT 1 
                   FROM   subquery_emp AS emp 
                   WHERE  emp.emp_name = bonus.emp_name 
                          AND EXISTS (SELECT Max(dept.dept_id) 
                                      FROM   subquery_dept AS dept 
                                      WHERE  emp.dept_id = dept.dept_id 
                                      GROUP  BY dept.dept_id))
-- !query analysis
Project [emp_name#x, bonus_amt#x]
+- Filter NOT exists#x [emp_name#x]
   :  +- Project [1 AS 1#x]
   :     +- Filter ((emp_name#x = outer(emp_name#x)) AND exists#x [dept_id#x])
   :        :  +- Aggregate [dept_id#x], [max(dept_id#x) AS max(dept_id)#x]
   :        :     +- Filter (outer(dept_id#x) = dept_id#x)
   :        :        +- SubqueryAlias dept
   :        :           +- SubqueryAlias spark_catalog.default.subquery_dept
   :        :              +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   :        +- SubqueryAlias emp
   :           +- SubqueryAlias spark_catalog.default.subquery_emp
   :              +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet
   +- SubqueryAlias bonus
      +- SubqueryAlias spark_catalog.default.subquery_bonus
         +- Relation spark_catalog.default.subquery_bonus[emp_name#x,bonus_amt#x] parquet


-- !query
SELECT *
FROM subquery_bonus AS bonus
WHERE EXISTS(SELECT RANK() OVER (PARTITION BY hiredate ORDER BY salary) AS s
                    FROM subquery_emp AS emp, subquery_dept AS DEPT where EMP.dept_id = DEPT.dept_id
                        AND DEPT.dept_name < BONUS.emp_name)
-- !query analysis
Project [emp_name#x, bonus_amt#x]
+- Filter exists#x [emp_name#x]
   :  +- Project [s#x]
   :     +- Project [salary#x, hiredate#x, s#x, s#x]
   :        +- Window [rank(salary#x) windowspecdefinition(hiredate#x, salary#x ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS s#x], [hiredate#x], [salary#x ASC NULLS FIRST]
   :           +- Project [salary#x, hiredate#x]
   :              +- Filter ((dept_id#x = dept_id#x) AND (dept_name#x < outer(emp_name#x)))
   :                 +- Join Inner
   :                    :- SubqueryAlias emp
   :                    :  +- SubqueryAlias spark_catalog.default.subquery_emp
   :                    :     +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet
   :                    +- SubqueryAlias DEPT
   :                       +- SubqueryAlias spark_catalog.default.subquery_dept
   :                          +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias bonus
      +- SubqueryAlias spark_catalog.default.subquery_bonus
         +- Relation spark_catalog.default.subquery_bonus[emp_name#x,bonus_amt#x] parquet
