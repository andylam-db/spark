-- Automatically generated by SQLQueryTestSuite
-- !query
WITH bonus_cte 
     AS (SELECT * 
         FROM   subquery_bonus AS bonus 
         WHERE  EXISTS (SELECT dept.dept_id, 
                                 emp.emp_name, 
                                 Max(salary), 
                                 Count(*) 
                          FROM   subquery_emp AS emp 
                                 JOIN subquery_dept AS dept 
                                   ON dept.dept_id = emp.dept_id 
                          WHERE  bonus.emp_name = emp.emp_name 
                          GROUP  BY dept.dept_id, 
                                    emp.emp_name 
                          ORDER  BY emp.emp_name)) 
SELECT * 
FROM   subquery_bonus AS bonus a 
WHERE  a.bonus_amt > 30 
       AND EXISTS (SELECT 1 
                   FROM   bonus_cte b 
                   WHERE  a.emp_name = b.emp_name)
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'a'",
    "hint" : ""
  }
}


-- !query
WITH emp_cte 
     AS (SELECT * 
         FROM   subquery_emp AS emp 
         WHERE  id >= 100 
                AND id <= 300), 
     dept_cte 
     AS (SELECT * 
         FROM   subquery_dept AS dept 
         WHERE  dept_id = 10) 
SELECT * 
FROM   subquery_bonus AS bonus 
WHERE  EXISTS (SELECT * 
               FROM   subquery_emp AS emp_cte a 
                      JOIN dept_cte b 
                        ON a.dept_id = b.dept_id 
               WHERE  bonus.emp_name = a.emp_name)
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'('",
    "hint" : ""
  }
}


-- !query
WITH emp_cte 
     AS (SELECT * 
         FROM   subquery_emp AS emp 
         WHERE  id >= 100 
                AND id <= 300), 
     dept_cte 
     AS (SELECT * 
         FROM   subquery_dept AS dept 
         WHERE  dept_id = 10) 
SELECT DISTINCT b.emp_name, 
                b.bonus_amt 
FROM   subquery_bonus AS bonus b, 
       emp_cte e, 
       subquery_dept AS dept d 
WHERE  e.dept_id = d.dept_id 
       AND e.emp_name = b.emp_name 
       AND EXISTS (SELECT * 
                   FROM   subquery_emp AS emp_cte a 
                          LEFT JOIN dept_cte b 
                                 ON a.dept_id = b.dept_id 
                   WHERE  e.emp_name = a.emp_name)
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'b'",
    "hint" : ""
  }
}


-- !query
WITH empdept 
     AS (SELECT id, 
                salary, 
                emp_name, 
                dept.dept_id 
         FROM   subquery_emp AS emp 
                LEFT JOIN subquery_dept AS dept 
                       ON emp.dept_id = dept.dept_id 
         WHERE  emp.id IN ( 100, 200 )) 
SELECT emp_name, 
       Sum(bonus_amt) 
FROM   subquery_bonus AS bonus 
WHERE  EXISTS (SELECT dept_id, 
                      max(salary) 
               FROM   subquery_emp AS empdept 
               GROUP  BY dept_id 
               HAVING count(*) > 1) 
GROUP  BY emp_name
-- !query analysis
WithCTE
:- CTERelationDef xxxx, false
:  +- SubqueryAlias empdept
:     +- Project [id#x, salary#x, emp_name#x, dept_id#x]
:        +- Filter id#x IN (100,200)
:           +- Join LeftOuter, (dept_id#x = dept_id#x)
:              :- SubqueryAlias emp
:              :  +- SubqueryAlias spark_catalog.default.subquery_emp
:              :     +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet
:              +- SubqueryAlias dept
:                 +- SubqueryAlias spark_catalog.default.subquery_dept
:                    +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
+- Aggregate [emp_name#x], [emp_name#x, sum(bonus_amt#x) AS sum(bonus_amt)#x]
   +- Filter exists#x []
      :  +- Project [dept_id#x, max(salary)#x]
      :     +- Filter (count(1)#xL > cast(1 as bigint))
      :        +- Aggregate [dept_id#x], [dept_id#x, max(salary#x) AS max(salary)#x, count(1) AS count(1)#xL]
      :           +- SubqueryAlias empdept
      :              +- SubqueryAlias spark_catalog.default.subquery_emp
      :                 +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet
      +- SubqueryAlias bonus
         +- SubqueryAlias spark_catalog.default.subquery_bonus
            +- Relation spark_catalog.default.subquery_bonus[emp_name#x,bonus_amt#x] parquet


-- !query
WITH empdept 
     AS (SELECT id, 
                salary, 
                emp_name, 
                dept.dept_id 
         FROM   subquery_emp AS emp 
                LEFT JOIN subquery_dept AS dept 
                       ON emp.dept_id = dept.dept_id 
         WHERE  emp.id IN ( 100, 200 )) 
SELECT emp_name, 
       Sum(bonus_amt) 
FROM   subquery_bonus AS bonus 
WHERE  NOT EXISTS (SELECT dept_id, 
                          Max(salary) 
                   FROM   subquery_emp AS empdept 
                   GROUP  BY dept_id 
                   HAVING count(*) < 1) 
GROUP  BY emp_name
-- !query analysis
WithCTE
:- CTERelationDef xxxx, false
:  +- SubqueryAlias empdept
:     +- Project [id#x, salary#x, emp_name#x, dept_id#x]
:        +- Filter id#x IN (100,200)
:           +- Join LeftOuter, (dept_id#x = dept_id#x)
:              :- SubqueryAlias emp
:              :  +- SubqueryAlias spark_catalog.default.subquery_emp
:              :     +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet
:              +- SubqueryAlias dept
:                 +- SubqueryAlias spark_catalog.default.subquery_dept
:                    +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
+- Aggregate [emp_name#x], [emp_name#x, sum(bonus_amt#x) AS sum(bonus_amt)#x]
   +- Filter NOT exists#x []
      :  +- Project [dept_id#x, max(salary)#x]
      :     +- Filter (count(1)#xL < cast(1 as bigint))
      :        +- Aggregate [dept_id#x], [dept_id#x, max(salary#x) AS max(salary)#x, count(1) AS count(1)#xL]
      :           +- SubqueryAlias empdept
      :              +- SubqueryAlias spark_catalog.default.subquery_emp
      :                 +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet
      +- SubqueryAlias bonus
         +- SubqueryAlias spark_catalog.default.subquery_bonus
            +- Relation spark_catalog.default.subquery_bonus[emp_name#x,bonus_amt#x] parquet
