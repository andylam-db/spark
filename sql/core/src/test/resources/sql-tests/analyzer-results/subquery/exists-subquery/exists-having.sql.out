-- Automatically generated by SQLQueryTestSuite
-- !query
SELECT dept_id, count(*) 
FROM   subquery_emp AS emp 
GROUP  BY dept_id 
HAVING EXISTS (SELECT 1 
               FROM   subquery_bonus AS bonus 
               WHERE  bonus_amt < min(emp.salary))
-- !query analysis
Project [dept_id#x, count(1)#xL]
+- Filter exists#x [min(salary#x)#x]
   :  +- Project [1 AS 1#x]
   :     +- Filter (bonus_amt#x < outer(min(salary#x)#x))
   :        +- SubqueryAlias bonus
   :           +- SubqueryAlias spark_catalog.default.subquery_bonus
   :              +- Relation spark_catalog.default.subquery_bonus[emp_name#x,bonus_amt#x] parquet
   +- Aggregate [dept_id#x], [dept_id#x, count(1) AS count(1)#xL, min(salary#x) AS min(salary#x)#x]
      +- SubqueryAlias emp
         +- SubqueryAlias spark_catalog.default.subquery_emp
            +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT * 
FROM   subquery_dept AS dept 
WHERE  EXISTS (SELECT dept_id, 
                      Count(*) 
               FROM   subquery_emp AS emp 
               GROUP  BY dept_id 
               HAVING EXISTS (SELECT 1 
                              FROM   subquery_bonus AS bonus 
                              WHERE bonus_amt < Min(emp.salary)))
-- !query analysis
Project [dept_id#x, dept_name#x, state#x]
+- Filter exists#x []
   :  +- Project [dept_id#x, count(1)#xL]
   :     +- Filter exists#x [min(salary#x)#x]
   :        :  +- Project [1 AS 1#x]
   :        :     +- Filter (bonus_amt#x < outer(min(salary#x)#x))
   :        :        +- SubqueryAlias bonus
   :        :           +- SubqueryAlias spark_catalog.default.subquery_bonus
   :        :              +- Relation spark_catalog.default.subquery_bonus[emp_name#x,bonus_amt#x] parquet
   :        +- Aggregate [dept_id#x], [dept_id#x, count(1) AS count(1)#xL, min(salary#x) AS min(salary#x)#x]
   :           +- SubqueryAlias emp
   :              +- SubqueryAlias spark_catalog.default.subquery_emp
   :                 +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet
   +- SubqueryAlias dept
      +- SubqueryAlias spark_catalog.default.subquery_dept
         +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet


-- !query
SELECT dept_id, 
       Max(salary) 
FROM   subquery_emp AS emp gp 
WHERE  EXISTS (SELECT dept_id, 
                      Count(*) 
               FROM   subquery_emp AS emp p
               GROUP  BY dept_id 
               HAVING EXISTS (SELECT 1 
                              FROM   subquery_bonus AS bonus 
                              WHERE  bonus_amt < Min(p.salary))) 
GROUP  BY gp.dept_id
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'gp'",
    "hint" : ""
  }
}


-- !query
SELECT * 
FROM   subquery_dept AS dept 
WHERE  EXISTS (SELECT dept_id, 
                        Count(*) 
                 FROM   subquery_emp AS emp 
                 GROUP  BY dept_id 
                 HAVING EXISTS (SELECT 1 
                                FROM   subquery_bonus AS bonus 
                                WHERE  bonus_amt > Min(emp.salary)))
-- !query analysis
Project [dept_id#x, dept_name#x, state#x]
+- Filter exists#x []
   :  +- Project [dept_id#x, count(1)#xL]
   :     +- Filter exists#x [min(salary#x)#x]
   :        :  +- Project [1 AS 1#x]
   :        :     +- Filter (bonus_amt#x > outer(min(salary#x)#x))
   :        :        +- SubqueryAlias bonus
   :        :           +- SubqueryAlias spark_catalog.default.subquery_bonus
   :        :              +- Relation spark_catalog.default.subquery_bonus[emp_name#x,bonus_amt#x] parquet
   :        +- Aggregate [dept_id#x], [dept_id#x, count(1) AS count(1)#xL, min(salary#x) AS min(salary#x)#x]
   :           +- SubqueryAlias emp
   :              +- SubqueryAlias spark_catalog.default.subquery_emp
   :                 +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet
   +- SubqueryAlias dept
      +- SubqueryAlias spark_catalog.default.subquery_dept
         +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet


-- !query
SELECT * 
FROM   subquery_dept AS dept 
WHERE  EXISTS (SELECT dept_id, 
                      count(emp.dept_id)
               FROM   subquery_emp AS emp 
               WHERE  dept.dept_id = dept_id 
               GROUP  BY dept_id 
               HAVING EXISTS (SELECT 1 
                              FROM   subquery_bonus AS bonus 
                              WHERE  ( bonus_amt > min(emp.salary) 
                                       AND count(emp.dept_id) > 1 )))
-- !query analysis
Project [dept_id#x, dept_name#x, state#x]
+- Filter exists#x [dept_id#x]
   :  +- Project [dept_id#x, count(dept_id)#xL]
   :     +- Filter exists#x [min(salary#x)#x && count(dept_id)#xL]
   :        :  +- Project [1 AS 1#x]
   :        :     +- Filter ((bonus_amt#x > outer(min(salary#x)#x)) AND (outer(count(dept_id)#xL) > cast(1 as bigint)))
   :        :        +- SubqueryAlias bonus
   :        :           +- SubqueryAlias spark_catalog.default.subquery_bonus
   :        :              +- Relation spark_catalog.default.subquery_bonus[emp_name#x,bonus_amt#x] parquet
   :        +- Aggregate [dept_id#x], [dept_id#x, count(dept_id#x) AS count(dept_id)#xL, min(salary#x) AS min(salary#x)#x]
   :           +- Filter (outer(dept_id#x) = dept_id#x)
   :              +- SubqueryAlias emp
   :                 +- SubqueryAlias spark_catalog.default.subquery_emp
   :                    +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet
   +- SubqueryAlias dept
      +- SubqueryAlias spark_catalog.default.subquery_dept
         +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
