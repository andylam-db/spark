-- Automatically generated by SQLQueryTestSuite
-- !query
SELECT * 
FROM   subquery_emp AS emp 
WHERE  EXISTS (SELECT dept.dept_id 
               FROM   subquery_dept AS dept 
               WHERE  emp.dept_id = dept.dept_id 
               ORDER  BY state) 
ORDER  BY hiredate
-- !query analysis
Sort [hiredate#x ASC NULLS FIRST], true
+- Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
   +- Filter exists#x [dept_id#x]
      :  +- Project [dept_id#x]
      :     +- Sort [state#x ASC NULLS FIRST], true
      :        +- Project [dept_id#x, state#x]
      :           +- Filter (outer(dept_id#x) = dept_id#x)
      :              +- SubqueryAlias dept
      :                 +- SubqueryAlias spark_catalog.default.subquery_dept
      :                    +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
      +- SubqueryAlias emp
         +- SubqueryAlias spark_catalog.default.subquery_emp
            +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT id, 
       hiredate 
FROM   subquery_emp AS emp 
WHERE  EXISTS (SELECT dept.dept_id 
               FROM   subquery_dept AS dept 
               WHERE  emp.dept_id = dept.dept_id 
               ORDER  BY state) 
ORDER  BY hiredate DESC
-- !query analysis
Sort [hiredate#x DESC NULLS LAST], true
+- Project [id#x, hiredate#x]
   +- Filter exists#x [dept_id#x]
      :  +- Project [dept_id#x]
      :     +- Sort [state#x ASC NULLS FIRST], true
      :        +- Project [dept_id#x, state#x]
      :           +- Filter (outer(dept_id#x) = dept_id#x)
      :              +- SubqueryAlias dept
      :                 +- SubqueryAlias spark_catalog.default.subquery_dept
      :                    +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
      +- SubqueryAlias emp
         +- SubqueryAlias spark_catalog.default.subquery_emp
            +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT *
FROM   subquery_emp AS emp
WHERE  EXISTS (SELECT dept.dept_id
               FROM   subquery_dept AS dept
               WHERE  emp.dept_id = dept.dept_id
               ORDER  BY state
               LIMIT 1)
ORDER  BY hiredate
-- !query analysis
Sort [hiredate#x ASC NULLS FIRST], true
+- Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
   +- Filter exists#x [dept_id#x]
      :  +- GlobalLimit 1
      :     +- LocalLimit 1
      :        +- Project [dept_id#x]
      :           +- Sort [state#x ASC NULLS FIRST], true
      :              +- Project [dept_id#x, state#x]
      :                 +- Filter (outer(dept_id#x) = dept_id#x)
      :                    +- SubqueryAlias dept
      :                       +- SubqueryAlias spark_catalog.default.subquery_dept
      :                          +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
      +- SubqueryAlias emp
         +- SubqueryAlias spark_catalog.default.subquery_emp
            +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT *
FROM   subquery_emp AS emp
WHERE  EXISTS (SELECT dept.dept_id
               FROM   subquery_dept AS dept
               WHERE  emp.dept_id = dept.dept_id
               ORDER  BY state
               LIMIT 0)
ORDER  BY hiredate
-- !query analysis
Sort [hiredate#x ASC NULLS FIRST], true
+- Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
   +- Filter exists#x [dept_id#x]
      :  +- GlobalLimit 0
      :     +- LocalLimit 0
      :        +- Project [dept_id#x]
      :           +- Sort [state#x ASC NULLS FIRST], true
      :              +- Project [dept_id#x, state#x]
      :                 +- Filter (outer(dept_id#x) = dept_id#x)
      :                    +- SubqueryAlias dept
      :                       +- SubqueryAlias spark_catalog.default.subquery_dept
      :                          +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
      +- SubqueryAlias emp
         +- SubqueryAlias spark_catalog.default.subquery_emp
            +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT * 
FROM   subquery_emp AS emp 
WHERE  NOT EXISTS (SELECT dept.dept_id 
                   FROM   subquery_dept AS dept 
                   WHERE  emp.dept_id = dept.dept_id 
                   ORDER  BY state) 
ORDER  BY hiredate
-- !query analysis
Sort [hiredate#x ASC NULLS FIRST], true
+- Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
   +- Filter NOT exists#x [dept_id#x]
      :  +- Project [dept_id#x]
      :     +- Sort [state#x ASC NULLS FIRST], true
      :        +- Project [dept_id#x, state#x]
      :           +- Filter (outer(dept_id#x) = dept_id#x)
      :              +- SubqueryAlias dept
      :                 +- SubqueryAlias spark_catalog.default.subquery_dept
      :                    +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
      +- SubqueryAlias emp
         +- SubqueryAlias spark_catalog.default.subquery_emp
            +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT emp_name 
FROM   subquery_emp AS emp 
WHERE  NOT EXISTS (SELECT max(dept.dept_id) a 
                   FROM   subquery_dept AS dept 
                   WHERE  dept.dept_id = emp.dept_id 
                   GROUP  BY state 
                   ORDER  BY state)
-- !query analysis
Project [emp_name#x]
+- Filter NOT exists#x [dept_id#x]
   :  +- Project [a#x]
   :     +- Sort [state#x ASC NULLS FIRST], true
   :        +- Aggregate [state#x], [max(dept_id#x) AS a#x, state#x]
   :           +- Filter (dept_id#x = outer(dept_id#x))
   :              +- SubqueryAlias dept
   :                 +- SubqueryAlias spark_catalog.default.subquery_dept
   :                    +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT count(*) 
FROM   subquery_emp AS emp 
WHERE  NOT EXISTS (SELECT max(dept.dept_id) a 
                   FROM   subquery_dept AS dept 
                   WHERE  dept.dept_id = emp.dept_id 
                   GROUP  BY dept_id 
                   ORDER  BY dept_id)
-- !query analysis
Aggregate [count(1) AS count(1)#xL]
+- Filter NOT exists#x [dept_id#x]
   :  +- Project [a#x]
   :     +- Sort [dept_id#x ASC NULLS FIRST], true
   :        +- Aggregate [dept_id#x], [max(dept_id#x) AS a#x, dept_id#x]
   :           +- Filter (dept_id#x = outer(dept_id#x))
   :              +- SubqueryAlias dept
   :                 +- SubqueryAlias spark_catalog.default.subquery_dept
   :                    +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT *
FROM   subquery_emp AS emp
WHERE  NOT EXISTS (SELECT dept.dept_id
                   FROM   subquery_dept AS dept
                   WHERE  emp.dept_id = dept.dept_id
                   ORDER  BY state
                   LIMIT 1)
ORDER  BY hiredate
-- !query analysis
Sort [hiredate#x ASC NULLS FIRST], true
+- Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
   +- Filter NOT exists#x [dept_id#x]
      :  +- GlobalLimit 1
      :     +- LocalLimit 1
      :        +- Project [dept_id#x]
      :           +- Sort [state#x ASC NULLS FIRST], true
      :              +- Project [dept_id#x, state#x]
      :                 +- Filter (outer(dept_id#x) = dept_id#x)
      :                    +- SubqueryAlias dept
      :                       +- SubqueryAlias spark_catalog.default.subquery_dept
      :                          +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
      +- SubqueryAlias emp
         +- SubqueryAlias spark_catalog.default.subquery_emp
            +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT *
FROM   subquery_emp AS emp
WHERE  NOT EXISTS (SELECT dept.dept_id
                   FROM   subquery_dept AS dept
                   WHERE  emp.dept_id = dept.dept_id
                   ORDER  BY state
                   LIMIT 0)
ORDER  BY hiredate
-- !query analysis
Sort [hiredate#x ASC NULLS FIRST], true
+- Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
   +- Filter NOT exists#x [dept_id#x]
      :  +- GlobalLimit 0
      :     +- LocalLimit 0
      :        +- Project [dept_id#x]
      :           +- Sort [state#x ASC NULLS FIRST], true
      :              +- Project [dept_id#x, state#x]
      :                 +- Filter (outer(dept_id#x) = dept_id#x)
      :                    +- SubqueryAlias dept
      :                       +- SubqueryAlias spark_catalog.default.subquery_dept
      :                          +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
      +- SubqueryAlias emp
         +- SubqueryAlias spark_catalog.default.subquery_emp
            +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT * 
FROM   subquery_emp AS emp 
WHERE  EXISTS (SELECT dept.dept_name 
               FROM   subquery_dept AS dept 
               WHERE  dept.dept_id > 10 
               LIMIT  1)
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
+- Filter exists#x []
   :  +- GlobalLimit 1
   :     +- LocalLimit 1
   :        +- Project [dept_name#x]
   :           +- Filter (dept_id#x > 10)
   :              +- SubqueryAlias dept
   :                 +- SubqueryAlias spark_catalog.default.subquery_dept
   :                    +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT * 
FROM   subquery_emp AS emp 
WHERE  EXISTS (SELECT max(dept.dept_id) 
               FROM   subquery_dept AS dept 
               GROUP  BY state 
               LIMIT  1)
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
+- Filter exists#x []
   :  +- GlobalLimit 1
   :     +- LocalLimit 1
   :        +- Aggregate [state#x], [max(dept_id#x) AS max(dept_id)#x]
   :           +- SubqueryAlias dept
   :              +- SubqueryAlias spark_catalog.default.subquery_dept
   :                 +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT * 
FROM   subquery_emp AS emp 
WHERE  NOT EXISTS (SELECT dept.dept_name 
                   FROM   subquery_dept AS dept 
                   WHERE  dept.dept_id > 100 
                   LIMIT  1)
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
+- Filter NOT exists#x []
   :  +- GlobalLimit 1
   :     +- LocalLimit 1
   :        +- Project [dept_name#x]
   :           +- Filter (dept_id#x > 100)
   :              +- SubqueryAlias dept
   :                 +- SubqueryAlias spark_catalog.default.subquery_dept
   :                    +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT * 
FROM   subquery_emp AS emp 
WHERE  NOT EXISTS (SELECT max(dept.dept_id) 
                   FROM   subquery_dept AS dept 
                   WHERE  dept.dept_id > 100 
                   GROUP  BY state 
                   LIMIT  1)
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
+- Filter NOT exists#x []
   :  +- GlobalLimit 1
   :     +- LocalLimit 1
   :        +- Aggregate [state#x], [max(dept_id#x) AS max(dept_id)#x]
   :           +- Filter (dept_id#x > 100)
   :              +- SubqueryAlias dept
   :                 +- SubqueryAlias spark_catalog.default.subquery_dept
   :                    +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT emp_name
FROM   subquery_emp AS emp
WHERE  NOT EXISTS (SELECT max(dept.dept_id) a
                   FROM   subquery_dept AS dept
                   WHERE  dept.dept_id = emp.dept_id
                   GROUP  BY state
                   ORDER  BY state
                   LIMIT 2
                   OFFSET 1)
-- !query analysis
Project [emp_name#x]
+- Filter NOT exists#x [dept_id#x]
   :  +- GlobalLimit 2
   :     +- LocalLimit 2
   :        +- Offset 1
   :           +- Project [a#x]
   :              +- Sort [state#x ASC NULLS FIRST], true
   :                 +- Aggregate [state#x], [max(dept_id#x) AS a#x, state#x]
   :                    +- Filter (dept_id#x = outer(dept_id#x))
   :                       +- SubqueryAlias dept
   :                          +- SubqueryAlias spark_catalog.default.subquery_dept
   :                             +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT *
FROM   subquery_emp AS emp
WHERE  EXISTS (SELECT dept.dept_name
               FROM   subquery_dept AS dept
               WHERE  dept.dept_id > 10
               LIMIT  1
               OFFSET 2)
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
+- Filter exists#x []
   :  +- GlobalLimit 1
   :     +- LocalLimit 1
   :        +- Offset 2
   :           +- Project [dept_name#x]
   :              +- Filter (dept_id#x > 10)
   :                 +- SubqueryAlias dept
   :                    +- SubqueryAlias spark_catalog.default.subquery_dept
   :                       +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT *
FROM   subquery_emp AS emp
WHERE  EXISTS (SELECT dept.dept_name
               FROM   subquery_dept AS dept
               WHERE  dept.dept_id > emp.dept_id
               LIMIT  1)
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
+- Filter exists#x [dept_id#x]
   :  +- GlobalLimit 1
   :     +- LocalLimit 1
   :        +- Project [dept_name#x]
   :           +- Filter (dept_id#x > outer(dept_id#x))
   :              +- SubqueryAlias dept
   :                 +- SubqueryAlias spark_catalog.default.subquery_dept
   :                    +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT *
FROM   subquery_emp AS emp
WHERE  EXISTS (SELECT max(dept.dept_id)
               FROM   subquery_dept AS dept
               GROUP  BY state
               LIMIT  1
               OFFSET 2)
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
+- Filter exists#x []
   :  +- GlobalLimit 1
   :     +- LocalLimit 1
   :        +- Offset 2
   :           +- Aggregate [state#x], [max(dept_id#x) AS max(dept_id)#x]
   :              +- SubqueryAlias dept
   :                 +- SubqueryAlias spark_catalog.default.subquery_dept
   :                    +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT *
FROM   subquery_emp AS emp
WHERE  EXISTS (SELECT max(dept.dept_id)
               FROM   subquery_dept AS dept
               WHERE  dept.dept_id <> emp.dept_id
               GROUP  BY state
               LIMIT  1)
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
+- Filter exists#x [dept_id#x]
   :  +- GlobalLimit 1
   :     +- LocalLimit 1
   :        +- Aggregate [state#x], [max(dept_id#x) AS max(dept_id)#x]
   :           +- Filter NOT (dept_id#x = outer(dept_id#x))
   :              +- SubqueryAlias dept
   :                 +- SubqueryAlias spark_catalog.default.subquery_dept
   :                    +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT *
FROM   subquery_emp AS emp
WHERE  NOT EXISTS (SELECT dept.dept_name
                   FROM   subquery_dept AS dept
                   WHERE  dept.dept_id > 100
                   LIMIT  1
                   OFFSET 2)
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
+- Filter NOT exists#x []
   :  +- GlobalLimit 1
   :     +- LocalLimit 1
   :        +- Offset 2
   :           +- Project [dept_name#x]
   :              +- Filter (dept_id#x > 100)
   :                 +- SubqueryAlias dept
   :                    +- SubqueryAlias spark_catalog.default.subquery_dept
   :                       +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT *
FROM   subquery_emp AS emp
WHERE  NOT EXISTS (SELECT max(dept.dept_id)
                   FROM   subquery_dept AS dept
                   WHERE  dept.dept_id > 100
                   GROUP  BY state
                   LIMIT  1
                   OFFSET 2)
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
+- Filter NOT exists#x []
   :  +- GlobalLimit 1
   :     +- LocalLimit 1
   :        +- Offset 2
   :           +- Aggregate [state#x], [max(dept_id#x) AS max(dept_id)#x]
   :              +- Filter (dept_id#x > 100)
   :                 +- SubqueryAlias dept
   :                    +- SubqueryAlias spark_catalog.default.subquery_dept
   :                       +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT *
FROM   subquery_emp AS emp
WHERE  EXISTS (SELECT dept.dept_name
               FROM   subquery_dept AS dept
               WHERE  dept.dept_id <> emp.dept_id
               LIMIT  1
               OFFSET 2)
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
+- Filter exists#x [dept_id#x]
   :  +- GlobalLimit 1
   :     +- LocalLimit 1
   :        +- Offset 2
   :           +- Project [dept_name#x]
   :              +- Filter NOT (dept_id#x = outer(dept_id#x))
   :                 +- SubqueryAlias dept
   :                    +- SubqueryAlias spark_catalog.default.subquery_dept
   :                       +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT *
FROM   subquery_emp AS emp
WHERE  EXISTS (SELECT dept.dept_name
               FROM   subquery_dept AS dept
               WHERE  dept.dept_id > 10
               OFFSET 2)
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
+- Filter exists#x []
   :  +- Offset 2
   :     +- Project [dept_name#x]
   :        +- Filter (dept_id#x > 10)
   :           +- SubqueryAlias dept
   :              +- SubqueryAlias spark_catalog.default.subquery_dept
   :                 +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT *
FROM   subquery_emp AS emp
WHERE  EXISTS (SELECT max(dept.dept_id)
               FROM   subquery_dept AS dept
               GROUP  BY state
               OFFSET 2)
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
+- Filter exists#x []
   :  +- Offset 2
   :     +- Aggregate [state#x], [max(dept_id#x) AS max(dept_id)#x]
   :        +- SubqueryAlias dept
   :           +- SubqueryAlias spark_catalog.default.subquery_dept
   :              +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT *
FROM   subquery_emp AS emp
WHERE  NOT EXISTS (SELECT dept.dept_name
                   FROM   subquery_dept AS dept
                   WHERE  dept.dept_id > 100
                   OFFSET 2)
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
+- Filter NOT exists#x []
   :  +- Offset 2
   :     +- Project [dept_name#x]
   :        +- Filter (dept_id#x > 100)
   :           +- SubqueryAlias dept
   :              +- SubqueryAlias spark_catalog.default.subquery_dept
   :                 +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet


-- !query
SELECT *
FROM   subquery_emp AS emp
WHERE  NOT EXISTS (SELECT max(dept.dept_id)
                   FROM   subquery_dept AS dept
                   WHERE  dept.dept_id > 100
                   GROUP  BY state
                   OFFSET 2)
-- !query analysis
Project [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]
+- Filter NOT exists#x []
   :  +- Offset 2
   :     +- Aggregate [state#x], [max(dept_id#x) AS max(dept_id)#x]
   :        +- Filter (dept_id#x > 100)
   :           +- SubqueryAlias dept
   :              +- SubqueryAlias spark_catalog.default.subquery_dept
   :                 +- Relation spark_catalog.default.subquery_dept[dept_id#x,dept_name#x,state#x] parquet
   +- SubqueryAlias emp
      +- SubqueryAlias spark_catalog.default.subquery_emp
         +- Relation spark_catalog.default.subquery_emp[id#x,emp_name#x,hiredate#x,salary#x,dept_id#x] parquet
